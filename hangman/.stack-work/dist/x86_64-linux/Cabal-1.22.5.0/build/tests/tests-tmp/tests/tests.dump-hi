
==================== FINAL INTERFACE ====================
2016-12-02 15:39:36.115677 UTC

interface main@main:Tests [orphan module] 7103
  interface hash: ff3e4d72e2960488b2a34741283ca316
  ABI hash: 5ec48b297ced97cc19b4b1b4f6c8cf72
  export-list hash: 80a04c5b220f3a6d88b24258acf6de52
  orphan hash: 9fe9472cc9f373066454b583c69cb89a
  flag hash: e60495a05e2f405ce27c803fea1b06cd
  sig of: Nothing
  used TH splices: False
  where
exports:
  Tests.charIsInPuzzle
  Tests.checkPuzzle
  Tests.puzzleGen
  Tests.runTests
  Tests.testFillInChar
module dependencies:
package dependencies: QuickCheck-2.8.1@Quick_8UnGnTXfSEEClQczG6tI7s
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0*
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hangman-0.1.0.0@hangm_Cl7LAeSwo0rI4Wz5e7V4SK integer-gmp-1.0.0.0
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL template-haskell-2.10.0.0
                      tf-random-0.5@tfran_1eLmkn3WUnC8NZpPuDLGKF
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.8.1@Quick_8UnGnTXfSEEClQczG6tI7s:Test.QuickCheck 437de8bc77c4cf58d9f8e24d5f1189e0
import  -/  QuickCheck-2.8.1@Quick_8UnGnTXfSEEClQczG6tI7s:Test.QuickCheck.Arbitrary a10d0bc9afecc40d55cb2d8489ef82ef
import  -/  QuickCheck-2.8.1@Quick_8UnGnTXfSEEClQczG6tI7s:Test.QuickCheck.Gen ecdcb395111c00bed2d1bf70bb854d7c
import  -/  QuickCheck-2.8.1@Quick_8UnGnTXfSEEClQczG6tI7s:Test.QuickCheck.Test e9a51d7946e7221f0b8f56b6d8751cf5
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  hangman-0.1.0.0@hangm_Cl7LAeSwo0rI4Wz5e7V4SK:Hangman 9d1b7bc2299f5afaff5c83191797f467
2f07dab8d610a3f84415b617cac3c499
  $fArbitraryPuzzle ::
    Test.QuickCheck.Arbitrary.Arbitrary Hangman.Puzzle
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hangman.Puzzle
                  Tests.puzzleGen
                  Tests.$fArbitraryPuzzle_$s$dmshrink -}
bdff7e0cdfd3cec78f4eeab4d12a6187
  $fArbitraryPuzzle_$s$dmshrink :: Hangman.Puzzle -> [Hangman.Puzzle]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds1 :: Hangman.Puzzle -> GHC.Types.[] @ Hangman.Puzzle) -}
f99a200b7c7875143090b9ff226e1a63
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe GHC.Types.Char)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Types.Char)
                  Tests.$s$fEqMaybe1
                  (GHC.Base.$fEqMaybe_$c/= @ GHC.Types.Char GHC.Classes.$fEqChar) -}
6e24ffc1659257d337f2a1b255d1ade0
  $s$fEqMaybe1 ::
    GHC.Base.Maybe GHC.Types.Char
    -> GHC.Base.Maybe GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GHC.Base.Maybe GHC.Types.Char
                   ds1 :: GHC.Base.Maybe GHC.Types.Char ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a3
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GHC.Classes.$fEqChar_$c== a3 b1 } }) -}
c148b4690a194600dec892866bd57f21
  $s$fTestable(->) ::
    Test.QuickCheck.Property.Testable
      (Hangman.Puzzle -> GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Hangman.Puzzle -> GHC.Types.Bool)
                  (Test.QuickCheck.Property.$fTestable(->)_$cproperty
                     @ Hangman.Puzzle
                     @ GHC.Types.Bool
                     Tests.$fArbitraryPuzzle
                     Hangman.$fShowPuzzle
                     Test.QuickCheck.Property.$fTestableBool)
                  Tests.$s$fTestable(->)1 -}
2318e7841c6c736fd452b4c0a7a83679
  $s$fTestable(->)1 ::
    (Hangman.Puzzle -> GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Hangman.Puzzle -> GHC.Types.Bool -> GHC.Types.False) -}
6983b3ebc9e0d5b1308f6198cc13927f
  $s$fTestable(->)2 ::
    Test.QuickCheck.Property.Testable
      (GHC.Types.Char -> Hangman.Puzzle -> GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Char -> Hangman.Puzzle -> GHC.Types.Bool)
                  (Test.QuickCheck.Property.$fTestable(->)_$cproperty
                     @ GHC.Types.Char
                     @ (Hangman.Puzzle -> GHC.Types.Bool)
                     Test.QuickCheck.Arbitrary.$fArbitraryChar
                     GHC.Show.$fShowChar
                     Tests.$s$fTestable(->)4)
                  Tests.$s$fTestable(->)3 -}
ed5c06e52a6754133ca00f71e5dfd198
  $s$fTestable(->)3 ::
    (GHC.Types.Char -> Hangman.Puzzle -> GHC.Types.Bool)
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Char -> Hangman.Puzzle -> GHC.Types.Bool ->
                 GHC.Types.False) -}
fc41c517ec702d9539ea45ea7b8c16b3
  $s$fTestable(->)4 ::
    Test.QuickCheck.Property.Testable
      (Hangman.Puzzle -> GHC.Types.Bool)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Tests.$s$fTestable(->) -}
70015296ffe4c045e2c895cc50b90dde
  $wa ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> (# GHC.Base.String,
          [GHC.Base.Maybe GHC.Types.Char],
          [GHC.Types.Char] #)
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ w :: Test.QuickCheck.Random.QCGen
                   w1 :: GHC.Types.Int ->
                 let {
                   str :: GHC.Base.String
                   = case w1 of ww { GHC.Types.I# ww1 ->
                     Test.QuickCheck.Arbitrary.$wa18
                       @ GHC.Types.Char
                       Test.QuickCheck.Arbitrary.$fArbitraryChar
                       (case w `cast`
                             (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww2 { System.Random.TF.Gen.TFGen ww3 ww4 ww5 ww6 ww7 ww8 ->
                        case System.Random.TF.Gen.$wtfGenSplit
                               ww3
                               ww4
                               ww5
                               ww6 of ww9 { (#,#) ww10 ww11 ->
                        ww10 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) } })
                       ww1 }
                 } in
                 (# str,
                    GHC.Base.map
                      @ GHC.Types.Char
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      Hangman.freshPuzzle1
                      str,
                    GHC.Types.[] @ GHC.Types.Char #)) -}
36cd7359706bcb5be853e21f25c62b30
  $wcharIsInPuzzle ::
    GHC.Types.Char
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Types.Char
                   ww :: [GHC.Base.Maybe GHC.Types.Char]
                   ww1 :: [GHC.Types.Char] ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        w
                        ww1 of wild {
                   GHC.Types.False
                   -> GHC.List.elem
                        @ (GHC.Base.Maybe GHC.Types.Char)
                        Tests.$s$fEqMaybe
                        (GHC.Base.Just @ GHC.Types.Char w)
                        ww
                   GHC.Types.True -> GHC.Types.True }) -}
6cee9c616e3cc6782e371ed592d112ce
  $wcheckPuzzle ::
    GHC.Types.Char
    -> GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U(U)><L,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Types.Char
                   ww :: GHC.Base.String
                   ww1 :: [GHC.Base.Maybe GHC.Types.Char]
                   ww2 :: [GHC.Types.Char] ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        w
                        (GHC.Types.: @ GHC.Types.Char w ww2) of wild {
                   GHC.Types.False
                   -> GHC.List.elem
                        @ (GHC.Base.Maybe GHC.Types.Char)
                        Tests.$s$fEqMaybe
                        (GHC.Base.Just @ GHC.Types.Char w)
                        (GHC.List.zipWith
                           @ GHC.Types.Char
                           @ (GHC.Base.Maybe GHC.Types.Char)
                           @ (GHC.Base.Maybe GHC.Types.Char)
                           (\ wordChar :: GHC.Types.Char
                              guessChar :: GHC.Base.Maybe GHC.Types.Char[OneShot] ->
                            case wordChar of wild1 { GHC.Types.C# c1 ->
                            case w of wild2 { GHC.Types.C# c2 ->
                            case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.eqChar# c1 c2) of wild3 {
                              GHC.Types.False -> guessChar
                              GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild1 } } })
                           ww
                           ww1)
                   GHC.Types.True -> GHC.Types.True }) -}
024d19350c38f435ee4c2dffb1118ce4
  charIsInPuzzle ::
    GHC.Types.Char -> Hangman.Puzzle -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><S(LLS),1*U(A,1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Char w1 :: Hangman.Puzzle ->
                 case w1 of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Tests.$wcharIsInPuzzle w ww2 ww3 }) -}
177646c6c9163a091c284e5ea3580a5d
  checkPuzzle :: GHC.Types.Char -> Hangman.Puzzle -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U(1*U,1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Char w1 :: Hangman.Puzzle ->
                 case w1 of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Tests.$wcheckPuzzle w ww1 ww2 ww3 }) -}
9d8c96f6cc737d9329f2ce1cf81174f9
  puzzleGen :: Test.QuickCheck.Gen.Gen Hangman.Puzzle
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Tests.puzzleGen1
                  `cast`
                (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <Hangman.Puzzle>_R)) -}
190d6661c11abd59e17f1f33d978c65f
  puzzleGen1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Hangman.Puzzle
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Test.QuickCheck.Random.QCGen w1 :: GHC.Types.Int ->
                 case Tests.$wa w w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 Hangman.Puzzle ww1 ww2 ww3 }) -}
e5975f6c29a1e03deecf28fe7e078e7c
  runTests :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Tests.runTests1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
da560293338a9df4cae64bbae3d46383
  runTests1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Test.QuickCheck.Test.$wa7
                        @ (GHC.Types.Char -> Hangman.Puzzle -> GHC.Types.Bool)
                        Tests.$s$fTestable(->)2
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Tests.checkPuzzle
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Test.QuickCheck.Test.$wa7
                        @ (GHC.Types.Char -> Hangman.Puzzle -> GHC.Types.Bool)
                        Tests.$s$fTestable(->)2
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Tests.checkPuzzle
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, GHC.Tuple.() #) } }) -}
516d28c5fb164cfa6dfaeafbbea19d5e
  testFillInChar ::
    GHC.Types.Char -> Hangman.Puzzle -> Hangman.Puzzle
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U(U,1*U,U)>m,
     Unfolding: InlineRule (2, True, True)
                (\ x :: GHC.Types.Char y :: Hangman.Puzzle ->
                 Hangman.fillInCharacter y x) -}
instance Test.QuickCheck.Arbitrary.Arbitrary [Hangman.Puzzle]
  = Tests.$fArbitraryPuzzle
"SPEC/Tests $dmshrink @ Puzzle" [ALWAYS] forall $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                 Hangman.Puzzle
  Test.QuickCheck.Arbitrary.$dmshrink @ Hangman.Puzzle $dArbitrary
  = Tests.$fArbitraryPuzzle_$s$dmshrink
"SPEC/Tests $fEqMaybe @ Char" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                        GHC.Types.Char
  GHC.Base.$fEqMaybe @ GHC.Types.Char $dEq = Tests.$s$fEqMaybe
"SPEC/Tests $fTestable(->) @ Char @ (Puzzle -> Bool)" [ALWAYS] forall $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                       GHC.Types.Char
                                                                      $dShow :: GHC.Show.Show
                                                                                  GHC.Types.Char
                                                                      $dTestable :: Test.QuickCheck.Property.Testable
                                                                                      (Hangman.Puzzle
                                                                                       -> GHC.Types.Bool)
  Test.QuickCheck.Property.$fTestable(->) @ GHC.Types.Char
                                          @ (Hangman.Puzzle -> GHC.Types.Bool)
                                          $dArbitrary
                                          $dShow
                                          $dTestable
  = Tests.$s$fTestable(->)2
"SPEC/Tests $fTestable(->) @ Puzzle @ Bool" [ALWAYS] forall $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                             Hangman.Puzzle
                                                            $dShow :: GHC.Show.Show Hangman.Puzzle
                                                            $dTestable :: Test.QuickCheck.Property.Testable
                                                                            GHC.Types.Bool
  Test.QuickCheck.Property.$fTestable(->) @ Hangman.Puzzle
                                          @ GHC.Types.Bool
                                          $dArbitrary
                                          $dShow
                                          $dTestable
  = Tests.$s$fTestable(->)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

