
==================== FINAL INTERFACE ====================
2016-12-02 14:58:31.311399 UTC

interface main@main:Hangman 7103
  interface hash: 3a6c4eb10f148de658aadd9820404c80
  ABI hash: 2b41ebfa3609b1da855cb30c8c6f79a4
  export-list hash: 8091c3076bf4595e7f96e21da9cfbf6d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e13c5a80f237e21f7a69c63624e8d13c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Hangman.allWords
  Hangman.alreadyGuessed
  Hangman.charInWord
  Hangman.fillInCharacter
  Hangman.freshPuzzle
  Hangman.gameOver
  Hangman.gameWin
  Hangman.gameWords
  Hangman.handleGuess
  Hangman.main
  Hangman.maxWordLength
  Hangman.minWordLength
  Hangman.randomWord
  Hangman.randomWord'
  Hangman.renderPuzzleChar
  Hangman.runGame
  Hangman.Puzzle{Hangman.Puzzle}
  Hangman.WordList
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL*
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Char c8f827952d4111ae2e47c0b105217cdb
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:GHC.Unicode cdf84fc3abbaf34ba6b6645291cef991
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.Exit f5581af4ad998e898da01fdc74c2769b
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL:System.Random 7342d23dcce4eee52b45be21357c602b
01dcad04dd90d82d60fcf47c7d2b9461
  $fShowPuzzle :: GHC.Show.Show Hangman.Puzzle
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Hangman.Puzzle
                  Hangman.$fShowPuzzle_$cshowsPrec
                  Hangman.$fShowPuzzle_$cshow
                  Hangman.$fShowPuzzle_$cshowList -}
01dcad04dd90d82d60fcf47c7d2b9461
  $fShowPuzzle1 ::
    Hangman.Puzzle -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ x :: Hangman.Puzzle s :: GHC.Base.String[OneShot] ->
                 case x of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 GHC.Base.++ @ GHC.Types.Char (Hangman.$w$cshow ww2 ww3) s }) -}
389019da9f9cc6f953afaa37c80bb53e
  $fShowPuzzle2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' ') -}
10ff9bbba6021442493349702781a400
  $fShowPuzzle3 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: (\ @ b
                   c :: GHC.Types.Char -> b -> b[OneShot]
                   n :: b[OneShot] ->
                 GHC.CString.unpackFoldrCString# @ b " Guessed so far: "# c n) -}
01dcad04dd90d82d60fcf47c7d2b9461
  $fShowPuzzle_$cshow :: Hangman.Puzzle -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Hangman.Puzzle ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.$w$cshow ww2 ww3 }) -}
01dcad04dd90d82d60fcf47c7d2b9461
  $fShowPuzzle_$cshowList :: [Hangman.Puzzle] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Hangman.Puzzle] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Hangman.Puzzle Hangman.$fShowPuzzle1 ls s) -}
01dcad04dd90d82d60fcf47c7d2b9461
  $fShowPuzzle_$cshowsPrec ::
    GHC.Types.Int -> Hangman.Puzzle -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LSL),1*U(A,1*U,U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: Hangman.Puzzle s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Hangman.$fShowPuzzle_$cshow x))
                   s) -}
3d570ab9a3331216f2c81de4c51036bb
  $w$cshow ::
    [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Base.Maybe GHC.Types.Char]
                   ww1 :: [GHC.Types.Char] ->
                 case GHC.Base.map
                        @ (GHC.Base.Maybe GHC.Types.Char)
                        @ GHC.Types.Char
                        Hangman.renderPuzzleChar
                        ww of wild {
                   []
                   -> Hangman.$fShowPuzzle3
                        @ [GHC.Types.Char]
                        (GHC.Types.: @ GHC.Types.Char)
                        ww1
                   : x xs
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (GHC.Types.:
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll
                              @ GHC.Types.Char
                              Hangman.$fShowPuzzle2
                              xs))
                        (Hangman.$fShowPuzzle3
                           @ [GHC.Types.Char]
                           (GHC.Types.: @ GHC.Types.Char)
                           ww1) }) -}
f87c780765c81cb9979970606c13f37b
  $wa ::
    GHC.Base.String
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Base.String
                   ww1 :: [GHC.Types.Char]
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char ww1 0 of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char ww 0 of ww3 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww2 ww3) of wild {
                   GHC.Types.False -> (# w, GHC.Tuple.() #)
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Hangman.gameOver2
                             GHC.Types.True
                             w of ds1 { (#,#) ipv ipv1 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.CString.unpackAppendCString# "Your word was "# ww)
                             GHC.Types.True
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      System.Exit.exitSuccess1 @ () ipv2 } } } } }) -}
99339da19f1bf9ab814c75786bb9efe7
  $wa1 ::
    [GHC.Base.Maybe GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Base.Maybe GHC.Types.Char]
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Hangman.gameWin_go ww)
                        `cast`
                      (Data.Monoid.NTCo:All[0]) of wild {
                   GHC.Types.False -> (# w, GHC.Tuple.() #)
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Hangman.gameWin2
                             GHC.Types.True
                             w of ds1 { (#,#) ipv ipv1 ->
                      System.Exit.exitSuccess1 @ () ipv } }) -}
9dfdf1b63e9171e5f9b26434be4ef133
  $wa2 ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><S,U><L,U><L,U>, Inline: [0] -}
01dcad04dd90d82d60fcf47c7d2b9461
  data Puzzle
    = Puzzle GHC.Base.String
             [GHC.Base.Maybe GHC.Types.Char]
             [GHC.Types.Char]
044f32200ee8a1cf55a453c988e908f2
  type WordList = [GHC.Base.String]
645e231dd58b6e470b9357122d4d87bb
  allWords :: GHC.Types.IO Hangman.WordList
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.allWords1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <Hangman.WordList>_R)) -}
f364069f0b3fae5f596f67895656ddf9
  allWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Hangman.WordList #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Hangman.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, Data.OldList.lines ipv3 #) } }) -}
86c2419cef3d5f9ec741caf181f9917c
  allWords2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "data/dict.txt"#) -}
0eb0b77bcf393beef75e472b780cb9b0
  alreadyGuessed ::
    Hangman.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Hangman.Puzzle c :: GHC.Types.Char ->
                 case ds of wild { Hangman.Puzzle ds1 ds2 lst ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar c lst }) -}
efa3b7f834a91507386ab310eafa2700
  charInWord :: Hangman.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Hangman.Puzzle c :: GHC.Types.Char ->
                 case ds of wild { Hangman.Puzzle str ds1 ds2 ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar c str }) -}
f454a17051ab5728d1ff33ea0fe80502
  fillInCharacter ::
    Hangman.Puzzle -> GHC.Types.Char -> Hangman.Puzzle
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,1*U,U)><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Hangman.Puzzle w1 :: GHC.Types.Char ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.Puzzle
                   ww1
                   (GHC.List.zipWith
                      @ GHC.Types.Char
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      (\ wordChar :: GHC.Types.Char
                         guessChar :: GHC.Base.Maybe GHC.Types.Char[OneShot] ->
                       case wordChar of wild { GHC.Types.C# c1 ->
                       case w1 of wild1 { GHC.Types.C# c2 ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.eqChar# c1 c2) of wild2 {
                         GHC.Types.False -> guessChar
                         GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild } } })
                      ww1
                      ww2)
                   (GHC.Types.: @ GHC.Types.Char w1 ww3) }) -}
e25f46fae6bd1f584dfe7992da112cd9
  freshPuzzle :: GHC.Base.String -> Hangman.Puzzle
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ str :: GHC.Base.String ->
                 Hangman.Puzzle
                   str
                   (GHC.Base.build
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      (\ @ b1
                         c :: GHC.Base.Maybe GHC.Types.Char -> b1 -> b1[OneShot]
                         n :: b1[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Base.Maybe GHC.Types.Char)
                            @ b1
                            @ GHC.Types.Char
                            c
                            Hangman.freshPuzzle1)
                         n
                         str))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b21d1d61bac76fc9978f549795b3372c
  freshPuzzle1 :: GHC.Types.Char -> GHC.Base.Maybe GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Char -> GHC.Base.Nothing @ GHC.Types.Char) -}
4aeda8bd408f09e08373067538cc29b0
  gameOver :: Hangman.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(SLS),1*U(U,A,1*U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.gameOver1
                  `cast`
                (<Hangman.Puzzle>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
220d393ef63e2d1fe9f552fec2406aad
  gameOver1 ::
    Hangman.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(SLS),1*U(U,A,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Hangman.Puzzle
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.$wa ww1 ww3 w1 }) -}
f117f40b577a1f74bb4a2683c4374bb5
  gameOver2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "You lose!"#) -}
97a02ae3b5e6b2384b3ca542b0e6587e
  gameWin :: Hangman.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.gameWin1
                  `cast`
                (<Hangman.Puzzle>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
6f0dfa9f6c267729a57d46b107fca17c
  gameWin1 ::
    Hangman.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),1*U(A,1*U,A)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Hangman.Puzzle
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.$wa1 ww2 w1 }) -}
c2e3047b879dc1f20a760bea970618ea
  gameWin2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "You win!"#) -}
a3c0d98d4ebc3282fae4e13d8809582c
  gameWin_go :: [GHC.Base.Maybe GHC.Types.Char] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0934088817150d4078557c713878d633
  gameWords :: GHC.Types.IO Hangman.WordList
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.gameWords1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <Hangman.WordList>_R)) -}
5ac06cbb34d605147d9c2c1b59e06b9d
  gameWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Hangman.WordList #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Hangman.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    GHC.List.filter
                      @ [GHC.Types.Char]
                      Hangman.gameWords2
                      (Data.OldList.lines ipv3) #) } }) -}
54844e53b9dffebe17da08ab811bd5e0
  gameWords2 :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ w :: GHC.Base.String ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0 of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww2 5) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww2 7) } }) -}
f28cfea976a9c8e343c1f65330870412
  handleGuess ::
    Hangman.Puzzle -> GHC.Types.Char -> GHC.Types.IO Hangman.Puzzle
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.handleGuess1
                  `cast`
                (<Hangman.Puzzle>_R
                 ->_R <GHC.Types.Char>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Hangman.Puzzle>_R)) -}
a450ae019af10c34d93a5902ae7c2582
  handleGuess1 ::
    Hangman.Puzzle
    -> GHC.Types.Char
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Hangman.Puzzle #)
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><L,U>,
     Unfolding: (\ puzzle :: Hangman.Puzzle
                   guess :: GHC.Types.Char
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "Your guess was: "#
                           (GHC.Types.:
                              @ GHC.Types.Char
                              guess
                              (GHC.Types.[] @ GHC.Types.Char)))
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case puzzle of wild { Hangman.Puzzle ds ds2 lst ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        guess
                        lst of wild1 {
                   GHC.Types.False
                   -> case GHC.List.elem
                             @ GHC.Types.Char
                             GHC.Classes.$fEqChar
                             guess
                             ds of wild2 {
                        GHC.Types.False
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Hangman.handleGuess4
                                  GHC.Types.True
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              Hangman.Puzzle
                                ds
                                (GHC.List.zipWith
                                   @ GHC.Types.Char
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   (\ wordChar :: GHC.Types.Char
                                      guessChar :: GHC.Base.Maybe GHC.Types.Char[OneShot] ->
                                    case wordChar of wild3 { GHC.Types.C# c1 ->
                                    case guess of wild4 { GHC.Types.C# c2 ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.eqChar# c1 c2) of wild5 {
                                      GHC.Types.False -> guessChar
                                      GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild3 } } })
                                   ds
                                   ds2)
                                (GHC.Types.: @ GHC.Types.Char guess lst) #) }
                        GHC.Types.True
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Hangman.handleGuess3
                                  GHC.Types.True
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              Hangman.Puzzle
                                ds
                                (GHC.List.zipWith
                                   @ GHC.Types.Char
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   @ (GHC.Base.Maybe GHC.Types.Char)
                                   (\ wordChar :: GHC.Types.Char
                                      guessChar :: GHC.Base.Maybe GHC.Types.Char[OneShot] ->
                                    case wordChar of wild3 { GHC.Types.C# c1 ->
                                    case guess of wild4 { GHC.Types.C# c2 ->
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.eqChar# c1 c2) of wild5 {
                                      GHC.Types.False -> guessChar
                                      GHC.Types.True -> GHC.Base.Just @ GHC.Types.Char wild3 } } })
                                   ds
                                   ds2)
                                (GHC.Types.: @ GHC.Types.Char guess lst) #) } }
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             Hangman.handleGuess2
                             GHC.Types.True
                             ipv of ds3 { (#,#) ipv2 ipv3 ->
                      (# ipv2, wild #) } } } }) -}
1264be3ba00cc8e96d3f95581d8b8ec7
  handleGuess2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "You already guessed that character, pick something else!"#) -}
4a41c09f4919a57fd1bae6cd206bd6f9
  handleGuess3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "This character was in the word, filling in the word accordingly.."#) -}
c7e7a6f4e664df0a4cb8d0e295df3354
  handleGuess4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "This character wasn't in the word, try again."#) -}
14d9c87957f2ba449104675689679735
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
83c3657c6f181d1e470dd12ff99bcf67
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Hangman.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   ipv4 :: Hangman.WordList
                   = GHC.List.filter
                       @ [GHC.Types.Char]
                       Hangman.gameWords2
                       (Data.OldList.lines ipv3)
                 } in
                 case System.Random.$fRandomInt3
                        (Hangman.main2,
                         case GHC.List.$wlenAcc
                                @ [GHC.Types.Char]
                                ipv4
                                0 of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1) })
                        ipv2 of ds3 { (#,#) ipv5 ipv6 ->
                 case ipv6 of ww { GHC.Types.I# ww1 ->
                 let {
                   str :: GHC.Base.String
                   = GHC.Base.map
                       @ GHC.Types.Char
                       @ GHC.Types.Char
                       GHC.Unicode.toLower
                       (GHC.List.$w!! @ GHC.Base.String ipv4 ww1)
                 } in
                 Hangman.$wa2
                   str
                   (GHC.Base.map
                      @ GHC.Types.Char
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      Hangman.freshPuzzle1
                      str)
                   (GHC.Types.[] @ GHC.Types.Char)
                   ipv5 } } } }) -}
9fb947115fc4e5dee28d287d089a5c91
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
631a3b866d736c851f0f3843d8e94154
  maxWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7) -}
de9156824c36b15538eccaa44f946399
  minWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5) -}
bf73183e51133e69539ef0ae53e559e8
  randomWord :: Hangman.WordList -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.randomWord1
                  `cast`
                (<Hangman.WordList>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)) -}
60d7effe4e97d4a2825ead012080c27d
  randomWord' :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.randomWord'1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R)) -}
5294e0ea81f6c20bf19e30adaf8ae470
  randomWord'1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Hangman.gameWords1 s of ds1 { (#,#) ipv ipv1 ->
                 Hangman.randomWord1 ipv1 ipv }) -}
863bdd6e9532d38c86ef7b4cc72775fa
  randomWord1 ::
    Hangman.WordList
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ wl :: Hangman.WordList
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case System.Random.$fRandomInt3
                        (Hangman.main2,
                         case GHC.List.$wlenAcc @ [GHC.Types.Char] wl 0 of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1) })
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.List.!! @ GHC.Base.String wl ipv1 #) }) -}
feff055b1f3ed66b0287ae5dadebe741
  renderPuzzleChar :: GHC.Base.Maybe GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GHC.Base.Maybe GHC.Types.Char ->
                 case ds of wild {
                   GHC.Base.Nothing -> Hangman.renderPuzzleChar1
                   GHC.Base.Just c -> c }) -}
0c3604a401e957016cdfb37dfa4d6ff2
  renderPuzzleChar1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '_') -}
af457867b937f6efe1c42fa915d30a29
  runGame :: Hangman.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),U(U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Hangman.runGame1
                  `cast`
                (<Hangman.Puzzle>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
e30dc2b4d6df99a6340f5dc4c66aa87c
  runGame1 ::
    Hangman.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),U(U,U,U)><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Hangman.Puzzle
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Hangman.Puzzle ww1 ww2 ww3 ->
                 Hangman.$wa2 ww1 ww2 ww3 w1 }) -}
instance GHC.Show.Show [Hangman.Puzzle] = Hangman.$fShowPuzzle
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

