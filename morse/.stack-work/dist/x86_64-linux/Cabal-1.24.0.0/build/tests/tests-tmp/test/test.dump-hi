
==================== FINAL INTERFACE ====================
2016-11-29 23:14:57.343239 UTC

interface main@main:Main 8001
  interface hash: a67c6db84a93bded0f4f3b21cf7e016b
  ABI hash: 2c981de197ac0f86f72a271473618118
  export-list hash: 9cc3c98cb32d3e2d2077df5ca0ff30fa
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b3fdfdebf110f91706660253b872d70a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.allowedChars
  Main.allowedMorse
  Main.charGen
  Main.main
  Main.morseGen
  Main.prop_thereAndBackAgain
module dependencies:
package dependencies: QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.1@ghc-boot-th-8.0.1
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1
                      morse-0.1.0.0@morse-0.1.0.0-2F1yPlPNpWt5tEDudMRXxi
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      template-haskell-2.11.0.0
                      tf-random-0.5@tf-random-0.5-4z8OJUaXC1FRNfrLPFWAD
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA:Test.QuickCheck a3636f7c6b928d0bf1ca94109fdc4fa1
import  -/  QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA:Test.QuickCheck.Gen 0fd68ca7a9018ca7869a870a61bd1097
import  -/  QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA:Test.QuickCheck.Property 7f4fa213531165bc7d1baaf38906016d
import  -/  QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA:Test.QuickCheck.Test bdf9746c027644d18958f86ed96d2a2d
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  morse-0.1.0.0@morse-0.1.0.0-2F1yPlPNpWt5tEDudMRXxi:Morse 4024d0afe727d030d5f5131fe335c328
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
ea831e4bf7517766ec28fd342074bbb2
  allowedChars :: [GHC.Types.Char]
  {- Unfolding: (Data.Map.Base.keys1
                   @ [GHC.Types.Char]
                   @ GHC.Types.Char
                   (GHC.Types.[] @ GHC.Types.Char)
                   Morse.letterToMorse) -}
2baadd2b63b33dcccf982b0d338312ed
  allowedMorse :: [Morse.Morse]
  {- Unfolding: (Data.Map.Base.elems1
                   @ GHC.Types.Char
                   @ [GHC.Types.Char]
                   (GHC.Types.[] @ [GHC.Types.Char])
                   Morse.letterToMorse) -}
8e058a556d4ff89ecca9179261d73d44
  charGen :: Test.QuickCheck.Gen.Gen GHC.Types.Char
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Types.Char
                   Main.allowedChars) -}
c339414dba2e765de90c1046d08149b8
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
8eeb77b347d6473c1cc3942487114d15
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ Test.QuickCheck.Property.Property
                        Test.QuickCheck.Property.$fTestableProperty
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.main2
                          `cast`
                        (Trans
                             (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       <Test.QuickCheck.Property.Prop>_R))
                             (Sym (Test.QuickCheck.Property.N:Property[0])))
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
382602a9d5ef318f2f8d2110784f2b71
  main2 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Test.QuickCheck.Property.Prop
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 let {
                   x :: GHC.Types.Char
                   = Main.charGen
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Char>_R)
                       (case ds1 of wild { (,) g1 g2 ->
                        g1 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) })
                       eta1
                 } in
                 (Test.QuickCheck.Property.counterexample_$scounterexample1
                    (case x of ww { GHC.Types.C# ww1 ->
                     GHC.Show.$w$cshowsPrec17 ww1 (GHC.Types.[] @ GHC.Types.Char) })
                    (case x of ww { GHC.Types.C# ww1 ->
                     case Morse.$wpoly_go1
                            @ [GHC.Types.Char]
                            ww1
                            Morse.letterToMorse of wild {
                       GHC.Base.Nothing -> GHC.Types.False
                       GHC.Base.Just x1
                       -> case Morse.$slookup1
                                 @ GHC.Types.Char
                                 x1
                                 Morse.morseToLetter of wild1 {
                            GHC.Base.Nothing -> GHC.Types.False
                            GHC.Base.Just a1
                            -> case a1 of wild2 { GHC.Types.C# x2 ->
                               GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.eqChar# x2 ww1) } } } }))
                   `cast`
                 (Trans
                      (Test.QuickCheck.Property.N:Property[0])
                      (Test.QuickCheck.Gen.N:Gen[0] <Test.QuickCheck.Property.Prop>_R))
                   (case ds1 of wild { (,) g1 g2 ->
                    g2 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) })
                   eta1) -}
18f730af0dc9fe191813526c48415cea
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
d9f0dd7a2a7ec64550f90d22ce95c856
  morseGen :: Test.QuickCheck.Gen.Gen Morse.Morse
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ Morse.Morse
                   Main.allowedMorse) -}
1d6efc47039f54d1608add3ba5a419f0
  prop_thereAndBackAgain :: Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main2
                  `cast`
                (Trans
                     (Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <Test.QuickCheck.Property.Prop>_R))
                     (Sym (Test.QuickCheck.Property.N:Property[0]))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

